控件使用举例：
	<Tree:TreeBox 
		id="partTree"
		treeType="single"
		src="DS_tree"
		selected=""
		baseUrl = ""
		onLoad = ""
		onChange = ""
		onTreeNodeSelected = ""
		onTreeNodeActived = ""
		onTreeNodeDoubleClick = ""
		onTreeNodeMoved = ""
		onBeforeSelected = ""
		onBeforeActived = ""
		onBeforeSelectedAndActived = ""
		canMoveNode = "true"
		style="width:60%;height:60%;">
	</Tree:TreeBox>


展开（open）：显示一个节点的所有直接子节点
关闭（close）：隐藏一个节点的所有直接子节点



非功能性需求：
	1、单个节点至少在有5000个直接子节点时展示没有太大问题。
	2、单击节点名称展开/关闭该节点。
	3、对于单选树：单击节点名称时，该节点状态为被选中，同时触发onChange事件。
	   对于多选树：单击节点名称时，不修改该节点状态。
	4、树节点拖动的限制：只能在同父节点下交换节点顺序。

控件功能方法：（控件提供的方法会自动同步界面显示）
	1、getTreeNodeById	
		职责：	根据给定id获取相应节点对象。
		param:	id: string
		return:	TreeNode | null
	2、getSelectedTreeNode：
		职责：	获取当前树上被选中的节点对象数组（如果是多选）或者是树节点对象（如果单选）
		param:	hasHalfChecked	是否包含半选状态的节点（多选）
					true	包含（默认（不提供参数时）为true）
					false	不包含
		return:	Array{TreeNodes}(selectType == multi) | TreeNode(selectType == single) | null

		◎如果是返回Array，则该对象应具有方法：
			toXmlStr:
				职责：将数组中所有TreeNode对象组合成一个XML字符串返回，其结果如下：
					<actionSet>
						<treeNode 节点1 />
						<treeNode 节点2 />
					</actionSet>
				param: void
				return: String
			说明：如果Array数组中包含半选状态的节点，则返回的xml有层次结构，否则将所有的节点都放到根节点上。
	3、getActiveTreeNode:
		职责：	获取当前树上被鼠标选中高亮显示的树节点对象（不一定被选中）
		param:	void
		return: TreeNode | null
	4、setActiveTreeNode:
		职责：	设定指定节点为选中高亮显示的树节点（不一定被选中）
		param:	id	节点id
		return: null
	5、insertTreeNodeXml:
		职责：	新增子节点
		param:	newNodeXML	新节点合法的xml
 			parentTreeNode	父节点合法的TreeNode对象
		return: true/false
	6、removeTreeNode:
		职责：	删除节点
		param:	treeNode	节点TreeNode对象
		return: true/false
	7、moveTreeNode:
		职责：	移动节点
		param:	movedTreeNode		移动节点TreeNode对象
 			toTreeNode		目标节点TreeNode对象
 			moveState		移动状态，-1为目标节点上方，1为目标节点下方
		return: true/false
	8、load
		职责：	载入树XML数据（xml节点、数据岛、数据文件或xml字符串）。
		param:	xml节点、数据岛、数据文件或xml字符串（注：同属性“src”的值）或者节点
		return: void
	9、loadXML:
		职责：	载入树XML数据（xml节点、数据岛、数据文件或xml字符串）。
		param:	xml节点、数据岛、数据文件或xml字符串
		return: void
	10、getTreeTitle
		职责：	获取树的标题
		param:	void
		return: String	树的标题
	11、loadDefaultChecked
		职责：	根据给定数据(树xml数据)，处理默认选中的节点
		param:	xml节点、数据岛、数据文件或xml字符串
			isClearOldSelected	是否清除原先选中的节点
		return: void
	12、loadDefaultCheckedByIds
		职责：	根据给定数据(树xml数据)，处理默认选中的节点
		param:	id字符串，多个id用“,”隔开
			isClearOldSelected	是否清除原先选中的节点
		return: void
	13、getIds
		职责：	获取全部节点ID字符串、或全部全选节点ID字符串、或全部全选＋半选节点ID字符串
		param:	isAll	是否为全部节点的Id
			onlySelected	只包括全选的
			exIdPatterns	匹配不包含的Id的正则表达式数组

		return:	id，字符串：id1,id2,id3
	14、disable
		职责：	禁止全部节点改变选中状态
		param:	void
		return:	void
	15、enable
		职责：	取消禁止全部节点改变选中状态功能
		param:	void
		return:	void
	16、setDefaultActive
		职责：	设置默认激活节点
		param:	type	默认激活节点类型：	none－不设置
							root－根节点（“全部”节点）
							valid－第一个有效数据节点（非“全部”节点）
		return:	void
	17、moveExternalTreeNode:
		职责：	移动节点
		param:	movedTreeNode		移动外部（其他树）的节点TreeNode对象
 			toTreeNode		目标节点TreeNode对象
 			moveState		移动状态，-1为目标节点上方，1为目标节点下方
		return: true/false
		
触发事件：
	1、oncomponentready		控件初始化完成
	2、onLoad			树载入xml完成事件。
	3、onTreeNodeActived		树节点被激活（高亮显示）事件
		event.treeNode = TreeNode: 被激活树节点对象。
	4、onTreeNodeDoubleClick	树节点双击事件
		event.treeNode = TreeNode: 被双击树节点对象。
	5、onTreeNodeMoved		树节点被移动
		event.movedTree = <Tree:TreeBox/>: 被移动的树控件对象。
		event.movedTreeNode = TreeNode: 被移动的树节点对象。
		event.toTreeNode = TreeNode: 移动到目标树节点对象。
		event.moveState = number: 值域：向下移动（1）/向上移动（-1）
		◎节点被移动：
			1）向上移动时，movedTreeNode应被移动到toTreeNode的上方
			2）向下移动时，movedTreeNode应被移动到toTreeNode的下方
	6、onChange			树节点状态/属性被改变事件
		◎注意：如果只是树节点被选中，是不触发这个事件的，即，只有在XML
			数据被修改时才触发这个事件。
	7、onTreeNodeSelected		节点选中
		event.treeNode = TreeNode: 被选中树节点对象。

	8、onBeforeActived		节点激活前触发事件
		event.returnValue = boolean: 法中可以设置event.returnValue = false来阻止激活节点
		event.treeNode = TreeNode: 将被选中的节点

	9、onBeforeSelected		节点选中前触发事件
		event.returnValue = boolean: 法中可以设置event.returnValue = false来阻止选中节点
		event.treeNode = TreeNode: 将被选中的节点

	10、onBeforeSelectedAndActived	节点选中和激活前触发事件
		event.returnValue = boolean: 法中可以设置event.returnValue = false来阻止选中和激活节点
		event.treeNode = TreeNode: 将被选中的节点

	
属性：
	1、treeType			树节点选择类型：multi/single（多选/单选）
	2、src				树数据源（符合树XML规范的xml数据岛id）
	3、baseUrl			树控件相关文件相对路径	默认:public/htc/Tree
	4、canMoveNode			是否可以移动树节点(true/false)	默认:false
	5、treeNodeSelectedChangeState	当树被选择时，同时修改树的选择状态（此时会触发onChange事件）(true/false)
					默认值：
						1) 单选树：true
						2) 多选树：false
	6、treeNodeClickOpenNode		当节点文字链接被点击时，是否同时打开或关闭此节点(true/false)
					默认值：true
	7、allCheckTypeDisabled		是否禁止所有节点改变选择状态(true/false)
					默认值：false
	8、selected			默认选中的数据：多选树：xml节点等（同src），单选树：节点id
	9、selectSelf			只选中自己，不改变父、子节点的选中状态。默认：false
	10、focusNewTreeNode		新增节点时，是否自动激活新增节点。默认：true
	11、defaultOpen			是否默认打开节点。默认：true
	12、defaultActive		是否默认激活节点：none（默认）－不激活；root－根节点（“全部”节点）；valid－第一个有效节点
树节点对象接口：
TreeNode
	方法：（控件方法只能更新xml数据，不同步界面显示，需调用对象的reload方法同步界面显示）
		[number]: getSelectedState()
			当前节点状态：
				如果selectType==multi:
					值域：nochecked/checked/halfchecked(0/1/2)
				如果selectType==single:
					值域：1/0
		void:	changeSelectedState([number]:state, boolean noFireChangeEvent)
			设定节点状态：
				如果state给定0、1，则按state改变选择状态，否则根据现有状态改变，规则如下：
					半选、全选 -> 未选
					未选 -> 全选
				noFireChangeEvent		是否不触发onChange事件

		Boolean:isViewed()
			节点是否显示。

		String: getParent();
			获取父节点的TreeNode对象
		
		String: getId();
		void:	setId(String: id)
			节点id

		String: getIds(isAll, onlySelected);
	 		获取ids，自己和子节点的id字符串，默认为自己和全部子节点中选中状态(全选、半选)的节点id字符串
			isAll	是否为全部自己、子节点的Id
			onlySelected	只包括全选的
			返回：	id，字符串：id1,id2,id3

		String: getName();
		void:	setName(String: name)
			节点名称
		String: getFullName(); 
		void:	setFullName(String: fullName)
			当前节点全路径名。
		void：	focus()
			打开节点，让节点出现在可视区域内。
		
		String: getAttribute(String: name)
		void:	setAttribute(String: name, String value)
			获取/设置节点属性字符串。
			◎不能通过setAttribute方法修改属性：
				id/name/fullName/display/checkType/canSelected
	
		void: setAttrbutesByXmlStr(String: xmlStr)
			使用一段合法的xml字符串更新该节点的所有属性信息。
		boolean: isActive() 
			当前节点是否为被鼠标选中高亮显示的树节点对象（不一定被选中）
		boolean: isEnabled()
			当前节点的display状态是否为enabled
		boolean: isCanSelected()
			当前节点是否可以被选中
		boolean: isOpened()
			当前节点是否为打开状态（即显示其直接子节点）
		Element: toElement()
			获取当前节点的XML节点对象，该对象是一个浅拷贝对象（不包含当前节点子节点）。
		String: toString()
			获取当前节点的XML节点对象的xml字符串（大概等同于：toElement().xml）
		void:	changeFolderState()
			改变节点的伸缩状态
		void: open()
			打开当前节点。
		void: close()
			关闭当前节点。
		void: enabled(isAllParent)
			将当前节点的display状态改为：enabled
			isAllParent	是否同时改变所有父节点的display状态
		void: disabled(isAllChildren)
			将当前节点的display状态改为：disabled

		void: setActive()
			设置当前节点为鼠标选中高亮显示的树节点对象（不一定被选中）

		appendChild：(此方法不自动激活新增节点)
			职责：	添加子节点
			param:	xml	子节点的xml
			return:	TreeNode/null，添加成功返回子节点的TreeNode对象，添加失败返回null
		remove:
			职责：	将当前节点从树上删除（将级连删除所有当前节点的子节点）
			param:	void
			return:	boolean, 值域：true/false，删除成功返回true，删除返回false
		moveTo:
			职责：	将当前节点移动到目标节点（上方/下方）
			param:	TreeNode: toNode
			return：boolean, 值域：true/false，移动成功返回true，移动返回false
		void: setCanSelected(Number: canSelected)：
			设置canSelected属性
			参数canSelected == 1, 则canSelected属性为1
			参数canSelected == 0, 则canSelected属性为0

		void:reload
			职责：	当改变xml值以后，此函数可以更新界面显示，使其于数据同步
			param:	void
			return:	void
