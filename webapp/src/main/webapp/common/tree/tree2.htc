<!--
	控件名称：单选/多选树

	功能说明：	1、单选/多选树的显示，重载
				2、枝节点的打开关闭（响应鼠标事件、接口对象提供方法）
				3、兄弟节点间的移动位置（响应鼠标事件、接口对象提供方法）
				4、节点的增、删、改
				5、节点选择状态的更改（响应鼠标事件、接口对象提供方法），参数控制是否和激活节点相关联
				6、返回选中节点（参数控制是否包括半选节点），返回对象或数组，提供方法转换成xml
				7、TreeNode接口对象。

	使用方法：见“树控件文档.txt”、‘树XML模板规范.xml’（参考test.html文件）
	名称空间：Tree
	作　　者：scq
	时　　间：2004-6-3
 -->
<PUBLIC:COMPONENT lightWeight="true"  literalContent = "true" supportsEditMode = "false" tagName = "Tree">

<PUBLIC:ATTACH event="oncontentready" onevent="initialize()" />
<PUBLIC:ATTACH event="ondblclick" onevent="_ondblclick()" />
<PUBLIC:ATTACH event="onclick" onevent="_onclick()" />
<PUBLIC:ATTACH event="ondragstart" onevent="_ondragstart()" />
<PUBLIC:ATTACH event="ondragover" onevent="_ondragenter()" />
<PUBLIC:ATTACH event="ondragleave" onevent="_ondragleave()" />
<PUBLIC:ATTACH event="ondrop" onevent="_ondrop()" />
<PUBLIC:ATTACH event="ondragend" onevent="_ondragend()" />
<PUBLIC:ATTACH event="onmouseover" onevent="_onmouseover()" />
<PUBLIC:ATTACH event="onmouseout" onevent="_onmouseout()" />
<PUBLIC:ATTACH event="onselectstart" onevent="_onselectstart()" />

<PUBLIC:PROPERTY NAME="treeType" /><!-- 树的类型 :value: multi/single-- >
<PUBLIC:PROPERTY NAME="src" /><!-- 树数据源（符合树XML规范的xml数据岛id） -->
<PUBLIC:PROPERTY NAME="selected" /><!-- 树数据源（符合树XML规范的xml数据岛id） -->
<PUBLIC:PROPERTY NAME="selectedIds" /><!-- 默认选中的节点id，多个id用“,”隔开 -->
<PUBLIC:PROPERTY NAME="canMoveNode" /><!-- 是否可以移动树节点，默认为false -->
<PUBLIC:PROPERTY NAME="treeNodeSelectedChangeState" /><!-- 当树被选择时，同时修改树的选择状态（此时会触发onChange事件），单选树默认为true，多选树默认为false -->
<PUBLIC:PROPERTY NAME="baseUrl" /><!--文件基本目录-->
<PUBLIC:PROPERTY NAME="treeNodeClickOpenNode" /><!--点击节点是否同步打开此节点-->
<PUBLIC:PROPERTY NAME="allCheckTypeDisabled" /><!--所有节点都不能改变选择状态-->
<PUBLIC:PROPERTY NAME="selectSelf" /><!--选中节点时只改变自己的选择状态，与父、子节点无关-->

<PUBLIC:METHOD NAME="getTreeNodeById"/>	<!-- 根据id获取相应的TreeNode对象，如果id对应对象不存在，返回null -->
<PUBLIC:METHOD NAME="getSelectedTreeNode"/>	<!-- 获取被选中的节点的TreeNode对象或对象数组 -->
<PUBLIC:METHOD NAME="getSelectedXmlNode"/>	<!-- 获取被选中的节点的XML对象或对象数组 -->
<PUBLIC:METHOD NAME="getActiveTreeNode"/>	<!-- 获取激活节点的TreeNode对象 -->
<PUBLIC:METHOD NAME="setActiveTreeNode"/>	<!-- 根据id激活节点 -->
<PUBLIC:METHOD NAME="insertTreeNodeXml"/>	<!-- 新增子节点 -->
<PUBLIC:METHOD NAME="removeTreeNode"/>	<!-- 删除节点 -->
<PUBLIC:METHOD NAME="moveTreeNode"/>	<!-- 移动节点 -->
<PUBLIC:METHOD NAME="moveExternalTreeNode"/>	<!-- 从外部（其他树）移动节点 -->
<PUBLIC:METHOD NAME="getTreeTitle"/>	<!-- 获取树的标题 -->
<PUBLIC:METHOD NAME="load"/>	<!-- xml节点、数据岛、数据文件或xml字符串，重新载入数据源 -->
<PUBLIC:METHOD NAME="loadXML"/>	<!-- xml节点、数据岛、数据文件或xml字符串，重新载入数据源 -->
<PUBLIC:METHOD NAME="loadDefaultChecked"/>	<!-- 根据给定数据(树xml数据)，处理默认选中的节点 -->
<PUBLIC:METHOD NAME="loadDefaultCheckedByIds"/>	<!-- 根据给定数据(id字符串，多个id用“,”隔开)，处理默认选中的节点 -->
<PUBLIC:METHOD NAME="getIds"/>	<!-- 获取全部（或全部全选，或全部全选、半选）节点的id字符串 -->
<PUBLIC:METHOD NAME="disable"/>	<!-- 禁止所有节点改变选中状态 -->
<PUBLIC:METHOD NAME="enable"/>	<!-- 允许没有被特殊指定不能选中的节点改变选中状态 -->
<PUBLIC:METHOD NAME="setDefaultActive"/>	<!-- 设定默认激活节点 -->

<!--事件触发混乱问题，暂时改用模拟事件-->
<!-- PUBLIC:EVENT NAME="oncomponentready" ID="eventComponentReady"/ -->	<!-- 控件初始化完成事件 -->
<!-- PUBLIC:EVENT NAME="onLoad" ID="eventTreeReady"/ -->	<!-- 载入完成事件 -->
<!-- PUBLIC:EVENT NAME="onTreeNodeSelected" ID="eventNodeSelected"/ -->	<!-- 节点选中事件 -->
<!-- PUBLIC:EVENT NAME="onTreeNodeActived" ID="eventNodeActived"/ -->	<!-- 节点激活事件 -->
<!-- PUBLIC:EVENT NAME="onTreeNodeDoubleClick" ID="eventNodeDoubleClick"/ -->	<!-- 节点双击事件 -->
<!-- PUBLIC:EVENT NAME="onTreeNodeMoved" ID="eventNodeMoved"/ -->	<!-- 节点移动事件 -->
<!-- PUBLIC:EVENT NAME="onChange" ID="eventTreeChange"/ -->	<!-- 节点选择状态改变事件 -->
<!-- PUBLIC:EVENT NAME="onInitDefaultSelected" ID="eventSelectedDefault"/ -->	<!-- 默认选中状态初始化完成事件 -->
<!-- PUBLIC:EVENT NAME="onBeforeSelected" ID="eventBeforeSelected"/ -->	<!-- 节点选中前事件 -->
<!-- PUBLIC:EVENT NAME="onBeforeActived" ID="eventBeforeActived"/ -->	<!-- 节点激活前事件 -->
<!-- PUBLIC:EVENT NAME="onBeforeSelectedAndActived" ID="eventBeforeSelectedAndActived"/ -->	<!-- 节点选中和激活前事件 -->

<script language="JavaScript" type="text/javascript" src="constant.js"></script>
<script language="JavaScript" type="text/javascript" src="public.js"></script>
<script language="JavaScript" type="text/javascript" src="tree.js"></script>
<script language="JavaScript" type="text/javascript" src="display.js"></script>
<script language="JavaScript" type="text/javascript" src="row.js"></script>
<script language="JavaScript" type="text/javascript" src="treenode.js"></script>
<script language="JavaScript" type="text/javascript" src="event.js"></script>
<script language="JavaScript" type="text/javascript" src="datasource.js"></script>

<script language="JavaScript">
/**
 * 事件触发混乱问题，暂时改用模拟事件
 */
function createEventObject(){
	return new Object();
}
function EventFirer(name){
	var _name = name;
	this.fire = function (event){
		//2006-4-6 修正原先模拟事件只能用字符串类型，更改为可同时支持function类型
		var func = element.getAttribute(_name);
		if(null==func){
			return;
		}
		var funcType = typeof(func);
		if("string"==funcType){
			eval(func);
		}else if("function"==funcType){
			func(event);
		}
	}
}
var eventComponentReady = new EventFirer("oncomponentready");
var eventTreeReady = new EventFirer("onLoad");
var eventNodeSelected = new EventFirer("onTreeNodeSelected");
var eventNodeActived = new EventFirer("onTreeNodeActived");
var eventNodeDoubleClick = new EventFirer("onTreeNodeDoubleClick");
var eventNodeMoved = new EventFirer("onTreeNodeMoved");
var eventTreeChange = new EventFirer("onChange");
var eventSelectedDefault = new EventFirer("onInitDefaultSelected");
var eventBeforeSelected = new EventFirer("onBeforeSelected");
var eventBeforeActived = new EventFirer("onBeforeActived");
var eventBeforeSelectedAndActived = new EventFirer("onBeforeSelectedAndActived");


var treeObj = null;
var displayObj = null;
var searchObj = null;
var loador = null;
element.className = _TREE_STYLE_NAME;
//element.innerHTML = _TREE_WAIT_LOAD_DATA_MSG;
/*
 * 载入树，如果没有参数dataSrc，则通过控件属性src获取数据；否则根据dataSrc获取数据。
 * 参数：	dataSrc 树数据源（符合树XML规范的xml数据岛id），字符串，可以省略。
 * 返回：	无
 */
function initialize(){
	loador = window.setTimeout(initializeImp, 0);
}
function initializeImp(){
	window.clearTimeout(loador);
	instanceTree();
	instanceDisplay();

	initData();

	//2006-4-6 增加isLoaded属性表示是否初始化完成
	element.isLoaded = true;

	//触发控件初始化完成事件
	eventComponentReady.fire(createEventObject()); 
}

/*
 * 根据id返回TreeNode对象，如果对象不存在，则返回null
 * 参数：	id	节点id，字符串
 * 返回：	TreeNode对象/null
 */
function getTreeNodeById(id){
	var node = treeObj.getXmlRoot().selectSingleNode("//" + _TREE_XML_NODE_NAME + "[@" + _TREE_XML_NODE_ATTRIBUTE_ID + "='" + id + "']");
	return instanceTreeNode(node);
}

/* 返回选取节点的TreeNode对象或对象数组
 * 参数：	hasHalfChecked	是否包括半选状态的节点，true为包括，false为不包括。
 * 返回：	单选树：TreeNode对象；多选树：TreeNode对象数组
 * 如果返回的是数组，则数组对象还提供toElement方法，将数组直接转换成xml字符串。
 * 如果hasHalfChecked参数为false，则不包括半选状态的节点，同时toElement方法
 * 给出的xml将所有TreeNode都放到根节点actionSet节点下；否则将给出包括全选、半
 * 选的所有节点，并按原有的节点层次关系给出xml字符串。
 */
function getSelectedTreeNode(hasHalfChecked){
	return treeObj.getSelectedTreeNode(hasHalfChecked);
}

/* 返回选取节点的Xml对象或对象数组
 * 参数：	hasHalfChecked	是否包括半选状态的节点，true为包括，false为不包括。
 * 返回：	单选树：Xml对象；多选树：Xml对象数组
 * 如果返回的是数组，则数组对象还提供toElement方法，将数组直接转换成xml节点。
 * 如果hasHalfChecked参数为false，则不包括半选状态的节点，同时toElement方法
 * 给出的xml将所有Xml都放到根节点actionSet节点下；否则将给出包括全选、半
 * 选的所有节点，并按原有的节点层次关系给出xml字符串。
 */
function getSelectedXmlNode(hasHalfChecked){
	return treeObj.getSelectedXmlNode(hasHalfChecked);
}

/*
 * 获取当前激活节点的TreeNode对象。如果没有激活的对象，则返回null。
 * 返回：	TreeNode对象
 */
function getActiveTreeNode(){
	return treeObj.getActiveNode();
}

/*
 * 设定相应id的节点为激活状态。
 * 参数：id 字符串，所要激活的节点的id，必须提供，否则会报错。
 * 返回：	无
 * 如果相应id的节点尚未被打开，也就是其父节点或父节点的父节点等没有被打开，那么先打开此节点。
 * 然后激活此节点，同时根据treeNodeSelectedChangeState属性，确定是否同时改变节点选择状态。
 */
function setActiveTreeNode(id){
	var treeNode = getTreeNodeById(id);
	if(treeNode instanceof TreeNode){
		treeObj.setActiveNode(treeNode);
		treeNode.setActive();	//激活节点，同时根据treeNodeSelectedChangeState属性，确定是否同时改变节点选择状态。
		treeNode.focus();		//打开节点，让节点出现在可视区域内。
	}
}

/*
 * 新增子节点，同时激活新节点
 * 参数：	newNodeXML	新节点合法的xml
 *			parentTreeNode	父节点合法的TreeNode对象
 * 返回：	true/false
 */
function insertTreeNodeXml(newNodeXML, parentTreeNode){
	if(!(parentTreeNode instanceof TreeNode)){
		return false;
	}
	var treeNode = parentTreeNode.appendChild(newNodeXML);		//新增子节点
	if(!(treeNode instanceof TreeNode)){
		return false;
	}
	if(treeObj.isFocusNewTreeNode()){
		treeNode.setActive();	//激活节点，同时根据treeNodeSelectedChangeState属性，确定是否同时改变节点选择状态。
		treeNode.focus();		//打开节点，让节点出现在可视区域内。
	}else{
		parentTreeNode.setActive();
		parentTreeNode.open();
	}
	return true;
}

/*
 * 删除节点
 * 参数：	treeNode	节点的TreeNode对象
 * 返回：	true/false
 */
function removeTreeNode(treeNode){
	//alert(treeNode instanceof TreeNode);
	if(!(treeNode instanceof TreeNode)){
		return false;
	}
	var result = treeNode.remove();		//删除节点
	displayObj.reload();
	return result;
}

/*
 * 跟据目标节点和移动状态，移动节点位置。
 * 参数：	movedTreeNode	移动节点TreeNode对象
 *			toTreeNode		目标节点TreeNode对象
 *			moveState		移动状态，-1为目标节点上方，1为目标节点下方
 * 返回：	true/false
 */
function moveTreeNode(movedTreeNode, toTreeNode, moveState){
	if(!treeObj.isCanMoveNode()
		|| !(movedTreeNode instanceof TreeNode)
		|| !(toTreeNode instanceof TreeNode)){
		return false;
	}
	var result = movedTreeNode.moveTo(toTreeNode, moveState);	//移动节点
	displayObj.reload();
	return result;
}

/*
 * 跟据目标节点和移动状态，从外部（其他树）移动节点位置。
 * 参数：	movedTreeNode	移动外部（其他树）的节点TreeNode对象
 *			toTreeNode		目标节点TreeNode对象
 *			moveState		移动状态，-1为目标节点上方，1为目标节点下方
 * 返回：	true/false
 */
function moveExternalTreeNode(movedTreeNode, toTreeNode, moveState){

	var movedTreeNodeId = movedTreeNode.getId();
	var movedTreeNodeXml = movedTreeNode.getXmlNode().xml;
	var toTreeNodeParent = toTreeNode.getParent();

	if(toTreeNodeParent.getXmlNode().nodeName=="actionSet"){//根节点
		var newRootTreeNode = new TreeNode();		//新增根节点
		newRootTreeNode.appendRoot(movedTreeNodeXml);
	}else{//枝节点
		insertTreeNodeXml(movedTreeNodeXml,toTreeNodeParent);
	}
		
	var newNode = getTreeNodeById(movedTreeNodeId);
	moveTreeNode(newNode,toTreeNode,moveState);

	var newNode = getTreeNodeById(movedTreeNodeId);
	newNode.setActive();	//激活节点，同时根据treeNodeSelectedChangeState属性，确定是否同时改变节点选择状态。
	newNode.focus();		//打开节点，让节点出现在可视区域内。
}

/*
 * 函数说明：获取树的标题
 * 参数：
 * 返回值：树标题字符串
 * 作者：scq
 * 时间：2004-6-14
 */
function getTreeTitle() {
	try{
		var title = treeObj.getXmlRoot().getAttribute("title");
		if(isNullOrEmpty(title)){
			return "选择";
		}else{
			return title;
		}
	}catch(e){
		alert("不能获取标题，xml数据为空或不能解析");
		throw(e);
	}
}
/*
 * 函数说明：设定默认选中节点
 * 参数：	type	默认选中类型
 * 返回值：
 * 作者：scq
 * 时间：2005-11-17
 */
function setDefaultActive(type) {
	treeObj.setDefaultActive(type);
}
/*
 * 函数说明：通过xml节点、数据岛、数据文件或xml字符串，重新载入数据源
 * 参数：	dataSrc	数据岛或者xml节点
 * 返回值：
 * 作者：scq
 * 时间：2004-7-2
 */
function loadXML(dataSrc) {
	treeObj.loadData(dataSrc);
	treeObj.setDefaultActive();
	displayObj.resetTotalTreeNodes();
	displayObj.reload();
	//触发载入完成事件
	eventTreeReady.fire(createEventObject()); 
}
function load (dataSrc){
	loadXML(dataSrc);
}
/*
 * 函数说明：初始化数据和默认选中状态
 * 返回值：
 * 作者：scq
 * 时间：2004-12-23
 */
function initData(){
	treeObj.loadData();
	treeObj.loadSelectedData();
	treeObj.setDefaultActive();
	displayObj.resetTotalTreeNodes();
	displayObj.reload();
	//触发载入完成事件
	eventTreeReady.fire(createEventObject()); 
}
/*
 * 函数说明：根据给定的数据，处理树节点的默认选中状态
 * 参数：	selectedSrc	默认选中的数据
 *		isClearOldSelected	是否清除原先选中节点
 * 返回值：
 * 作者：沈超奇
 * 时间：2004-12-23
 */
function loadDefaultChecked(selectedSrc, isClearOldSelected) {
	treeObj.loadSelectedData(selectedSrc, isClearOldSelected);
	displayObj.resetTotalTreeNodes();
	displayObj.reload();
	var eventObj = createEventObject();
	eventObj.type = "_SelectedDefalt";
	eventSelectedDefault.fire(eventObj);
}
/*
 * 函数说明：根据给定的数据，处理树节点的默认选中状态
 * 参数：	selectedIds	默认选中的数据(id字符串，多个id用“,”隔开)
 *		isClearOldSelected	是否清除原先选中节点
 * 返回值：
 * 作者：沈超奇
 * 时间：2005-4-19
 */
function loadDefaultCheckedByIds(selectedIds, isClearOldSelected) {
	treeObj.loadSelectedDataByIds(selectedIds, isClearOldSelected);
	displayObj.resetTotalTreeNodes();
	displayObj.reload();
	var eventObj = createEventObject();
	eventObj.type = "_SelectedDefalt";
	eventSelectedDefault.fire(eventObj);
}

/*
 * 获取ids，所有节点的id字符串，默认为所有选中状态(全选、半选)的节点id字符串
 * 参数：isAll	是否为全部节点的Id
 *       onlySelected	只包括全选的
 *	 exIdPatterns	匹配不包含的Id的正则表达式数组
 * 返回：	id，字符串：id1,id2,id3
 * 作者：沈超奇
 * 时间：2005-9-19
 */
function getIds(isAll, onlySelected, exIdPatterns){
	if(isAll){
		var path = ".//" + _TREE_XML_NODE_NAME;
	}else{
		if(onlySelected){
			var path = ".//" + _TREE_XML_NODE_NAME + "[@" + _TREE_XML_NODE_ATTRIBUTE_CHECKTYPE + "='1']";
		}else{
			var path = ".//" + _TREE_XML_NODE_NAME + "[@" + _TREE_XML_NODE_ATTRIBUTE_CHECKTYPE + "='1' or @" + _TREE_XML_NODE_ATTRIBUTE_CHECKTYPE + "='2']";
		}
	}
	var nodes = treeObj.getXmlRoot().selectNodes(path);
	var ids = "";
	node:
	for(var i = 0; i < nodes.length; i++){
		var id = nodes[i].getAttribute(_TREE_XML_NODE_ATTRIBUTE_ID);
		if(id == _TREE_XML_ROOT_TREE_NODE_ID){
			continue;
		}
		if(exIdPatterns != null){
			for(var j = 0; j < exIdPatterns.length; j++){
				if(exIdPatterns[j].test(id)){
					continue node;
				}
			}
		}
		if(ids.length > 0){
			ids += ",";
		}
		ids += id;
	}
	return ids;
}

/*
 * 禁止所有节点改变选中状态
 * 参数：
 * 返回：
 * 作者：沈超奇
 * 时间：2005-10-29
 */
function disable(){
	treeObj.disable();
}

/*
 * 取消全部节点都被禁止改变选中状态，即没有特殊指定不能被选中的节点外，全都能改变节点状态
 * 参数：
 * 返回：
 * 作者：沈超奇
 * 时间：2005-10-29
 */
function enable(){
	treeObj.enable();
}
</script>
</PUBLIC:COMPONENT>
