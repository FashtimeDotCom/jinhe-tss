<!-- 
XForm控件配置模板

文档说明：
	属性名前加“＃”符号表示该属性必须存在，如果不存在，应该提示该错误。

	以下说明中，如果没有特殊说明，都为大小写敏感，特别是tagName有关的命名，一定要注意大小写。
	命名规则同普通java变量命名：名字第一个字母小写，其它单词的首字母大写

	在“子节点”说明中，将给出可用子节点的tagName或者是统称，后面根一对括号，括号内注明该类节点可出现的次数。
	如：
		childTagName(0-1)--tagName为“childTagName”的节点可有零个或者一个。
		childTagName(*)----在括号中使用“*”，表示可以有零个或者任意多个
		childTagName(+)----在括号中使用“+”，表示至少有一个，不限数量。

XML配置模板定义：

一、操作请求定义节点：
	◎目的和职责：一个请求操作所需的所有信息都将被定义在该节点下，多个请求可以通过定义多个“操作请求定义节点”
				来完成。
	◎tagName: 任意
	◎属性：
		1、＃action：	定义当前操作提交时访问的action，该值为页面正常form表单action值去除request的
						contextPath的值。
		2、clsss：		定义XForm界面显示的css样式。如果没有定义，控件将设定默认的css样式（页面必须引用xform.css）。
		3、submitCmd:	定以Form递交前检测数据的函数。submitCmd(_ancestor)。
						检测函数可以用“_ancestor”代表当前的XForm。
		4、其它：			所有应用于HTML FORM标签的属性。
						如果没有定义，默认置属性：
							name="actionForm"
							method="post"
		   注意：当使用表单固有的submit按钮递交表单时，此处的 target 可以覆盖 XForm 标签中的 target 。
				当使用submit控件递交表单时，此处不能定义onsubmit属性。
	◎例子：	
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')" target="" queryName="selectFunctionSectionsByYear"/>
			<update/>
		</actionSet>
	<!--
	◎子节点：“declare”(0-1)、“data”(0-1)、“layout”(0-1)、“script”(0-1)
二、declare节点：
	◎目的和职责：当前操作请求需要访问的数据源数据定义，数据源细节由子节点“column”定义
	◎tagName: declare
	◎属性：
		1、columnDataTagName：（目前尚未实现）
						定义和本节点同级的“data”节点中数据行节点的tagName。
						默认值：“row”
		2、onload		定义onload事件。
						如：
								onload = "init(_ancestor);"

								function change(XForm){
									alert(XForm.id);
								}
		3、ondatachange		定义ondatachange事件。
						如：
								ondatachange = "change();"

								function change(){
									event.result.srcElement		改变对象
									event.result.name		对象名
									event.result.oldValue		原值
									event.result.newValue		新值
								}
		4、其他：			可以定义actionSet节点上的任何属性，用于在本操作请求时，覆盖actionSet节点上的公用属性。
	◎例子：	
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')">
				<declare>
					<column name="columnName"/>
				</declare>
				<data>
					<row>
                        <columnName><![CDATA[value]]></columnName>
					</row>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
	◎子节点：“column”(+)
三、data节点：
	◎目的和职责：当前操作请求需要访问的数据源数据定义，数据源细节由子节点“column”定义
	◎tagName: data
	◎属性：暂无
	◎例子：
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')">
				<declare>
					<column name="columnName"/>
				</declare>
				<data>
					<row>
                        <columnName><![CDATA[value]]></columnName>
					</row>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
	◎子节点：
			数据行节点(*)----	节点tagName默认为“row”，可以在“declare”节点上定义“columnDataTagName”
							属性值来自定义（见“二、declare节点”例子）。
四、layout节点：
	◎目的和职责：定义当前操作的页面HTML布局，这个节点的定义可以很自由，具体情况视页面相关控件的功能实现
				而定。
	◎tagName: layout
	◎子节点 buttonset ：定义表单递交按钮，见 （八、buttonset节点）
		TR	表格行，用于包含TD，
		TD	单元格，用于存放各个内容及各编辑框
		label	编辑框前的名称文字，用binding属性指定此处的名称来自哪个column,例如<label binding="user"/>
	◎其它：
		在layout子节点当中，如果含有属性“binding”(非label节点名)，那么其值一定是“declare”节点定义的“column”节点中
		的一个“name”属性值，表示，当前节点需要绑定该column节点所对应的数据节点值。
	◎绑定节点：
		普通HTML的INPUT标签（radio除外）可进行绑定以外：
		其它标签将被原封不动拷贝到结果界面。
		如果要在此节点中定义数据岛，即<xml id=xxx>...</xml>，则应该将tagName改为xmlIsland，即<xmlIsland id=xxx>...</xmlIsland>
	◎例子：
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')">
				<declare>
					<column name="columnName"/>
				</declare>
				<layout>
					<TR>
						<TD>布局</TD>
						<TD><INPUT NAME="layout" binding="columnName"></TD>
					</TR>
					<TR>
						<TD>布局</TD>
						<TD><INPUT TYPE="checkbox" NAME="layout" binding="columnName"></TD>
					</TR>
					<TR>
						<TD>角色描述</TD>
						<TD><textarea cols="50" rows="6" NAME="roledescription" binding="roledescription"/></TD>
					</TR>
					<TR>
						<TD>xxxxx</TD>
						<TD><comboedit editorvalue="v1|v2|v3" editortext="vv1|vv2|vv3" binding="special"/></TD>
					</TR>
					<buttonset>
						<input type="submit" value="确定"/>
						<input type="button" value="自定义" class="xxx" customPorp1="aaa" customPorp2="bbb"/>
						<input type="reset" value="重置"/>
						<input type="button" value="关闭" onclick="window.close()"/>
					</buttonset>
				</layout>
				<data>
					<row columnName="value"/>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
	◎子节点：任意合法的包含于HTML页面“<BODY>”和“</BODY>”两个标签内部的HTML/XML节点(+)
	◎说明：用于显示和修改数据的控件有：text、textarea、checkbox、comboedit，使用方法见上面例子
			其他非自定义的控件，将按原样copy到页面上。
		已封装的控件如下：
		<input type="text" binding="columnName"
		<input type="textarea" binding="columnName"或者<textarea		
		已停用：<input type="comboedit" binding="columnName" editorvalue="值1|值2|值3" editortext="显示文字1|显示文字2|显示文字3" 或者<comboedit		
		已停用：<input type="radio" binding="columnName" editorvalue="值1|值2|值3" editortext="显示文字1|显示文字2|显示文字3" 
		<input type="checkbox" binding="columnName"

五、script节点：
	◎目的和职责：定义当前操作的页面的一些script
	◎tagName: script
	◎属性：暂无
	◎格式：
		<script>
			<![CDATA[ 
				//script 语句
				alert("test");
				function test(a){
					alert(a);
				} 
				//end
			]]>
		</script>

	◎例子：
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"test('onsubmit event')">
				<declare>
					<column name="columnName"/>
				</declare>
				<script>
					<![CDATA[ 
						alert("test");
						function test(a){
							alert(a);
						} 
					]]>
				</script>
				<data>
					<row>
                        <columnName><![CDATA[value]]></columnName>
					</row>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
	◎子节点：无
六、column节点：
	◎目的和职责：	定义数据源数据的细节信息，包括从数据源获取一个字段数据的字段名、类型等等。
	◎tagName: column
	◎属性：
			属性名				说明
			------------------------------------------------------------------------
			id					保证唯一性，通常为name属性值
			------------------------------------------------------------------------
			＃caption			该列名称的界面表示方式，如 “节点名称” 即为layout中相应数据前的中文字符串
								用于显示检测错误信息
			-------------------------------------------------------------------------
			＃name				该列名称，如果存在该属性，那么该属性将被赋值到该列的每一行。	
			------------------------------------------------------------------------
			＃mode				节点类型
								值域：
								string	:	字符串
								number	:	数字，包括整数、双精度等，具体格式由pattern属性定义
								hidden	:	隐藏，不一定要放在末尾。
								function:	弹出式或其他自定义方式
								boolean	:	布尔型，显示效果为一个checkbox
								money	:	金额型，这个类型实际控件本身不处理，由外部辅助代码
											处理，需将其转换成number类型，并设置pattern和reg属性。
											控件遇到这个类型，需要将其视为number类型处理。
								date	:	日期型，
			-------------------------------------------------------------------------
			cmd					如果class="function"，那么必须定义该属性，其值应为一段JS，以触
								发onclick事件。
								自定义的函数的参数可以用“_srcElement”代表当前对象，用“_ancestor”代表当前的XForm。
								修改当前对象的数据的时候，需要用updateDataExternal(name,value)，此函数同时修改xml
								数据和页面显示值，如：
								var newValue = "对象的新数据！！！";
								change(_srcElement, _ancestor, newValue);

								function change(srcElement, XForm, newValue){
									XForm.updateDataExternal(srcElement.name, newValue);
								}
			------------------------------------------------------------------------
			editable			是否可编辑
								值域：true/false
								默认值：true
			------------------------------------------------------------------------
			isConst				是否进行数据库修改。（即页面上是否可以通过调用updateDataExternal函数进行数据修改）
								值域：true/false
								默认值：false
			------------------------------------------------------------------------
			empty				值是否可为空（为false时，会在输入框后标记*）
							默认值:true
			-------------------------------------------------------------------------
			pattern				该属性值是一个表达式，描述了当前字段的格式化信息。
								默认值："0"
								当“class”属性值为如下值时调用本属性值：
									1、number
										格式化字符串规格如下：
											字符			描述
											"#"			表示该位置可以任意数字，
											"0"			表示该位不存在数字时补0
											","			表示按位数加逗号，
														如：“,###” 表示整型，每3位数加逗号，注意
														这个符号只能加在整数部分，不能在小数部分，
														另外，只有从右开始第一个逗号才有效，再往左
														的相应符号都会被过滤不作处理。
											"."，表示其后跟的是小数点。
									2、date
										pattern关键字定义：
											字符	描述					例子
											y		Year					1996; 96  
											M		Month in year			July; Jul; 07  
											d		Day in month			10  
											H		Hour in day (0-23)		0  
											k		Hour in day (1-24)		24  
											m		Minute in hour			30  
											s		Second in minute		55  
										一般出来的格式如下：
											yyyy-MM-dd		描述日期：2004-3-2、2003-12-12
										该格式中的“-”应可以自由替换，
										就是说，除了上面所列的关键字，其它字符应都不修改。
										必须设置
			-------------------------------------------------------------------------
			inputReg			表示当前列字段内容显示在单元格中后，用户编辑时需要遵循的正则
								表达式，过滤用户不和规格的输入。
			-------------------------------------------------------------------------
			errorInfo			inputReg进行验证后出错的详细信息。
			-------------------------------------------------------------------------
			inputCmd			表示当前列字段内容显示在单元格中后，需要应用此属性定义的
								函数（可定义在script节点中）进行验证。
								如：check(_srcElement,'用户名','类型')，其中_srcElement代表当前对象。
								其优先级高于inputReg，有此属性时，inputReg规则不进行验证。
								自定义的函数的参数可以用“_srcElement”代表当前对象，用“_ancestor”代表当前的XForm。
			--------------------------------------------------------------------------
			submitReg			表示当前列字段内容显示在单元格中后，用户编辑完成后提交表单时需要
								验证的正则表达式。
			--------------------------------------------------------------------------
			clickOnly			function类型专用，表示是否只允许点击按钮（即文本框是否可直接手工输入）
								默认true，表示不能手工输入只能点击
			--------------------------------------------------------------------------
			multiple			是否多值
								值域：true/false
								默认false，表示单值
			--------------------------------------------------------------------------
			editor  			编辑方式，默认无，表示普通文本框
								值域：无/comboedit/radio
								默认false，表示单值
			--------------------------------------------------------------------------
			editorvalue         下拉列表(或者一组radio)值的集合，用|分隔
                                仅当editor="comboedit/radio"时有效
			--------------------------------------------------------------------------
			editortext          下拉列表(或者一组radio)文字的集合，用|分隔
                                仅当editor="comboedit/radio"时有效
			--------------------------------------------------------------------------
			maxLength           限制输入字符的字节数
                                仅string,number,money有效
	◎例子：
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')">
				<declare>
					<column name="columnName" mode="string"/>
					<column name="columnName2" mode="string" editor="comboedit" editorvalue="1|2" editortext="a|b"/>
				</declare>
				<data>
					<row>
                        <columnName><![CDATA[value]]></columnName>
                        <columnName2><![CDATA[1]]></columnName2>
					</row>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
	◎子节点：无
七、数据行节点：
	◎目的和职责：  存储数据。
	◎tagName:      row
	◎属性：        无
	◎子节点：
        1、由“declare”节点的每个子节点“column”定义的“name”属性决定
        2、其值由<![CDATA[ ]]>包围书写
        3、如果column定义多值(multiple="true")，则可以有多个同名兄弟节点
		
	◎例子：
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')">
				<declare>
					<column name="columnName"/>
					<column name="columnName2" multiple="true"/>
				</declare>
				<script>
					alert("script");
				</script>
				<data>
					<row>
                        <columnName><![CDATA[123]]></columnName>
                        <columnName2><![CDATA[111111111]]></columnName2>
                        <columnName2><![CDATA[2222222222]]></columnName2>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
八、buttonset节点：
	◎目的和职责：定义当前操作的页面Form的递交按钮。
	◎tagName: buttonset
	◎其他：	其中使用submit按钮递交表单时，可以在相应的操作节点上定义target，onsubmit属性。
			使用button （class＝submitAction）时，通过控件（模态窗口）递交表单时，不能在相应的
			操作节点上定义onsubmit属性。其按钮的书写格式参考submit控件。
	◎例子：
	-->
		<actionSet>
			<query action="/targetServlet" onsubmit＝"alert('onsubmit event')">
				<declare>
					<column name="columnName"/>
				</declare>
				<layout>
					<TABLE>
						<TR>
							<TD>布局</TD>
							<TD><INPUT TYPE="text" NAME="layout" binding="columnName"></TD>
						</TR>
						<buttonset>
							<input type="submit" value="确定"/>
							<input type="button" value="自定义" class="xxx" customPorp1="aaa" customPorp2="bbb"/>
							<input type="reset" value="重置"/>
							<input type="button" value="关闭" onclick="window.close()"/>
						</buttonset>
					</TABLE>
				</layout>
				<data>
					<row>
                        <columnName><![CDATA[value]]></columnName>
					</row>
				</data>
			</query>
			<update/>
		</actionSet>
	<!--
	◎子节点：合法的按钮书写格式
	-->
