_BROWSER_IE = "IE";
_BROWSER_FF = "FF";
_BROWSER_OPERA = "OPERA";
_BROWSER_CHROME = "CHROME";
_BROWSER != _BROWSER_IE


下面的a,b,c可以是表示节点的表达式, 比如: ./Book[@name='1'] 


1. 判断一个节点是否存在 
Xml代码  收藏代码
<xsl:if test="a">  

2. 判断多个节点是否同时存在 
Xml代码  收藏代码
<xsl:if test="a | b | c">  

3. 判断多个节点是否至少有一个存在 
Xml代码  收藏代码
<xsl:if test="a or b or c">  

<xsl:if test="节点名称">
<xsl:if test="@属性名称">

. 调用模板处理元素和属性
<xsl:template match="para">
   <p><xsl:apply-templates select="@* | node()"/></p>
</xsl:template>


匹配属性的模板(a 有可选的 width 和 depth 属性可能需要保存到 HTML 中)
<xsl:template match="imagedata">
   <img><xsl:apply-templates select="@*"/></img>
</xsl:template>

<xsl:template match="@width">
   <xsl:attribute name="width">
      <xsl:value-of select="."/>
   </xsl:attribute>
</xsl:template>

<xsl:template match="@fileref">
   <xsl:attribute name="href">
      <xsl:value-of select="."/>
   </xsl:attribute>
</xsl:template>



1.处理附加在元素中的属性
<xsl:template match="ulink">
   <a href="{@url}"><xsl:apply-templates/></a>
</xsl:template>

这个模板转换 ulink 元素和 url 属性，但只与 ulink 元素匹配。
如果属性是必需的——换句话说，它一定会出现，则对元素匹配是合理的。

但是如果属性是可选的，您就得在输出中生成某些内容之前，测试该属性是否存在。
2. 在模板匹配中测试属性
<xsl:template match="emphasis[@type='bold']">
   <b><xsl:apply-templates/></b>
</xsl:template>



 <xsl:variable name="level" select="11 mod 3"/>
      <xsl:choose>
        <xsl:when test='$level=1'>
          <xsl:number format="i"/>
        </xsl:when>
        <xsl:when test='$level=2'>
          <xsl:number format="a"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:number format="1"/>
        </xsl:otherwise>
      </xsl:choose>

<xsl:template match="BOOK[@target-audience='management']">
  Authors: <xsl:apply-templates select="AUTHOR"/>
</xsl:template>



js传入参数到xslt
1、在js中如下：
    xmlDoc = new ActiveXObject('Msxml2.DOMDocument.3.0')
    xmlDoc.async = false;
    xmlDoc.load("../xml/context.xml")
    
    //要声明为自由格式的样式
    xslDoc = new ActiveXObject('MSXML2.FreeThreadedDOMDocument.3.0')
    xslDoc.async = false;
    xslDoc.load("../xml/context.xsl")
    
    var oXSLT = new ActiveXObject("MSXML2.XSLTemplate.3.0");
    oXSLT.stylesheet = xslDoc;
    var oXSLProc = oXSLT.createProcessor();
    oXSLProc.input = xmlDoc;
    //document.all.hidGUID.value为页面中一个变量
    oXSLProc.addParameter("testvalue", document.all.hidGUID.value);
    oXSLProc.transform();
    //输出信息
    oXSLProc.output;
2、在xsl中下如：
    <xsl:param name="testvalue"/>
    <xsl:template match="entity">
    <xsl:if test="description!=($testvalue)">
    ......
    </xsl:if>   
    </xsl:template>